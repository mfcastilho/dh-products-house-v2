Roadmap aula:
    
  Na aula de hoje iremos implementar a session para o servidor saber quem é o usuário, para isso iremos trabalhar com o express-session e criar o model de usuários.

  Atividade 1 - Cadastro:
    Nesta atividade iremos criar o model de usuário e configurar as rotas para cadastrar um usuário, para atingir esse objetivo será necessário:
      ✔ Criar o model com o nome User @done(23-02-08 11:26)
        ✔ Criar os seguintes métodos no model: @done(23-02-08 12:05)
          ✔ findOne: Deve receber o email como parâmetro e retornar o objeto do usuário que for igual ao e-mail @done(23-02-08 11:26)
          ✔ create: Este método deve receber um objeto como parâmetro e criar um novo usuário no nosso banco de dados. Lembre-se de criar o id, fique a vontade para utilizar a biblioteca crypto ou uuid. @done(23-02-08 12:05)
      
        ✔ No arquivo authRouter, criar a rota do tipo POST para enviar os dados necessários para cadastrar um usuário @done(23-02-08 14:58)
      ✔ @done(23-02-08 18:35)
        ✔ No front (cadastro.ejs) comentar a linha que importa o script de validação do CEP e os demais inputs que não são necessários para o cadastro. (Deixar somente os inputs de: Nome, email e senha) @done(23-02-08 18:35)
      
        ✔ No arquivo AuthController, criar o método store, esse método deve capturar os dados que estão vindo do formulário de cadastro, verificar se o email já está cadastrado no banco de dados (caso estiver cadastado, renderizar a view de cadastro e exibir uma mensagem de erro falando: Não foi possível realizar a operação) caso não estiver cadastrado, deve realizar o cadastro no banco (utilizando o model) e após o cadastro, redirecionar o usuário para a rota de login. @done(23-02-08 18:42)
        *Obs: Lembre-se que a senha do usuário deve ser criptografada no banco, para isso utilize a biblioteca do bcryptjs.

  Atividade 2 - Login:
    Nesta atividade, iremos realizar o login de usuários cadastrado no banco de dados, para isso será necessário:
      ✔ No arquivo authRouter, criar a rota do tipo POST para enviar os dados necessários para logar um  usuário. @done(23-02-08 18:48)

      ✔ No AuthController, criar o método login, este método deve: @started(23-02-08 18:48) @done(23-02-08 19:19) @lasted(31m14s)
        ✔ Capturar os dados para logar um usuário @started(23-02-08 18:48) @done(23-02-08 19:19) @lasted(31m14s)

        ✔ Verificar se o usuário tem cadastrado no banco de dados, utilizando o model. @done(23-02-08 19:22)

        ☐ Verificar se a senha que foi digitada no input está de acordo com a senha que foi cadastrada no banco de dados.

        ☐ Se o usuário não existir no banco de dados ou a senha estiver incorreta, renderizar a view de login novamente exibindo o seguinte erro 
        ☐ Se tudo estiver certo, redirecionar o usuário para a tela home
    
  Atividade 3 - Exibindo o nome do usuário no Header:
    Nesta atividade iremos exibir o nome do usuário no header, para conseguir isso, iremos implementar a session, essa atividade será realizada junto com o professor:
   
      ☐ Instalar o express-session
      ☐ Salvar os dados do usuário na session
      ☐ Criar o middleware isLogin, onde ele deve inserir os dados do usuário no objeto locals do response.
      ☐ Exibir o nome do usuário no header.

  Atividade 4 - Protegendo rotas de admin:
    Nesta atividade iremos proteger as nossas rotas de admin:
      ☐ Criar o middleware isAdmin, ele deve verificar se existe a seção e se o usuário que está na seção é do tipo Administrador, caso for, permitir o acesso senão, redirecionar para a rota da homepage.

      ☐ Aplicar o middleware nas rotas de admin e fazer testes com usuários que são administrador e não são administrador

  Desafio:
    ☐ Criar a rota /logout do tipo get e no AuthController criar o método logout para destruir a seção do usuário logal quando clicar no botão de logout